<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" onload="init(evt)" onmousemove="mMove(evt)" version="1.1"><style type="text/css">line{stroke:rgba(0,0,0,.05);stroke-width:1px;shape-rendering:geometricPrecision}text{font:12px &apos;Segoe UI&apos;,&apos;Roboto&apos;,sans-serif;fill:#696969}.tickH{text-anchor:middle;fill:#222}#pointText{text-anchor:end}.back{fill:none;opacity:1}.dataLine{stroke-width:1px;transition:fill 400ms ease-in-out;shape-rendering:geometricPrecision}#xpst{transition:all 150ms ease-in-out}#xpst.hide{opacity:0;visibility:hidden;transform:translate(-50px)}#xpst.show{opacity:1;visibility:visible;transform:translate(0)}#maxText{cursor:pointer}</style><script type="text/ecmascript"><![CDATA[
		/*
		Hi there! What are you looking at? Messy isn't it?
		^_^
		*/
		var week = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
		var pointLoc = 0;
		var vWidth = 1024;
		var vHeight = 300;
		var maxV = 0;
		var maxL = 0;
		var time24 = 0;
		var advX = 1;
		var interval = 0;
		var hours = 0;
		var xpstVis = 1;
		var ignoreNext = 0;
		var eraseL = 0;
		var samp = 1;
		function E(id)
		{
			return document.getElementById(id);
		}
		function pad(n)
		{
			n = n.toString();
			while (n.length < 2) n = '0' + n;
			return n;
		}
		function xps(n)
		{

			if (n > (1000*1000)) {
				n = (n / (1000*1000));
				return (n * 8).toFixed(2) + ' mbit/s (' + n.toFixed(2) + ' MB/s)';
			} else {
				n = (n / 1000);
				return (n * 8).toFixed(2) + ' kbit/s (' + n.toFixed(2) + ' KB/s)';
			}
		}
		function setText(e, text)
		{
			// Adobe/IE doesn't do textContent=
			if (e.firstChild) e.removeChild(e.firstChild);
			e.appendChild(document.createTextNode(text));
		}
		function init(evt)
		{
			var n;
			if (typeof(svgDocument) == 'undefined') svgDocument = evt.target.ownerDocument;
			polyRx = E('polyRx');
			polyTx = E('polyTx');
			pointTextBack = E('pointTextBack');
			pointText = E('pointText');
			pointG = E('pointGroup');
			maxText = E('maxText');
			tickLines = [];
			for (n = 0; n < 24; ++n) {
				tickLines[n] = E('tick' + n);
			}
			tickHours = [];
			for (n = 0; n < 12; ++n) {
				tickHours[n] = E('h' + n);
			}
			xpst = [];
			for (n = 0; n < 3; ++n)
				xpst[n] = E('xpst' + n);
			time24 = ((new Date(2000, 0, 1, 23, 0, 0, 0)).toLocaleString().indexOf('23') != -1);
			top.updateSVG = updateSVG;
			top.svgReady = 1;
			top.initData();
		}
		function drawData(poly, data, mode, color)
		{
			var i;
			var pt;
			var x, y;
			var d, j;
			if (data.length == 0) return;
			x = 0;

			if (mode == 0) {

				poly.setAttribute('fill-opacity', '0.4');
				pt = '0,' + vHeight;

			} else {

				poly.setAttribute('fill-opacity', '0');
				pt = '';

			}

			poly.setAttribute('stroke', color);
			poly.setAttribute('fill', color);

			for (i = data.length - maxL; i < data.length; ++i) {

				if (i < 0) {

					d = 0;

				} else if (i >= samp) {

					d = 0;
					for (j = samp - 1; j >= 0; --j) {
						d += data[i - j];
					}
					d /= (dataDiv * samp);

				} else {

					d = data[i] / dataDiv;

				}

				y = (vHeight - Math.floor((d * vHeight) / maxV))
				pt += ' ' + Math.floor(x) + ',' + y;
				x += advX;

			}

			pt += ' ' + (vWidth + 5) + ',' + y + ' ' + (vWidth + 10) + ',' + vHeight;
			poly.setAttribute('points', pt);

		}
		function updateSVG(rxData, txData, maxValue, mode, rxColor, txColor, intv, maxLen, dataD, avgSamp, clock, newWidth)
		{

			if (newWidth != null) {
				vWidth = newWidth;
			}

			var x, y, z, i;
			var v, e;
			maxV = maxValue;
			interval = intv;
			maxL = maxLen;
			advX = vWidth / maxL;
			dataDiv = dataD;
			samp = avgSamp;
			tockD = clock;
			//	tockD = new Date();
			tock = tockD.getTime();
			if (intv < 60) {

				// realtime
				x = z = (vWidth / 5);
				for (i = 0; i < 4; ++i) {
					tickLines[i].setAttribute('x1', Math.round(x));
					tickLines[i].setAttribute('x2', Math.round(x));
					x += z;
				}

				// Hide other lines in the BW Mode
				for (i = 4; i < 24; i++) {
					tickLines[i].setAttribute('visibility', 'hidden');
				}

			}
			else {
				advM = (60 / interval) * advX;
				x = (60 - tockD.getMinutes()) * advM;
				v = advM * 60;
				for (i = 0; i < 24; ++i) {
					z = Math.round(x);
					y = (new Date(tock - (Math.round((vWidth - z - 1) / advX) * interval * 1000))).getHours();
					x += v;
					e = tickLines[i];
					e.setAttribute('x1', z);
					e.setAttribute('x2', z);
					e.setAttribute('class', (y & 1) ? 'a' : 'b');
					if ((y & 1) == 0) {
						e = tickHours[i >> 1];
						e.setAttribute('x', z);
						z = y % 24;
						if (!time24) {
							if (z < 12) {
								if (z == 0) z = 12;
								z += ' am';
							}
							else {
								z -= 12;
								if (z == 0) z = 12;
								z += ' pm';
							}
						}
						setText(e, z);
					}
				}
			}

			if (maxV <= 0) {
				polyRx.setAttribute('points', '');
				polyTx.setAttribute('points', '');
				return;
			}

			drawData(polyRx, rxData, mode, rxColor);
			drawData(polyTx, txData, mode, txColor);
			setText(maxText, xps(maxV) + ' >');
			setText(xpst[0], xps(maxV * 0.75));
			setText(xpst[1], xps(maxV * 0.5));
			setText(xpst[2], xps(maxV * 0.25));
			if (eraseL > 0) {
				if (--eraseL == 0) pointG.setAttribute('visibility', 'hidden');
			}
		}
		function vY(y)
		{
			return maxV - (maxV * (y / vHeight))
		}
		function pointTime(x)
		{
			var t, hh, h, s;
			t = new Date(tock - (Math.round((vWidth - x - 1) / advX) * interval * 1000));
			h = t.getHours();
			s = week[t.getDay()] + ' ';
			if (time24)	{
				s += pad(h) + ':' + pad(t.getMinutes());
			}
			else {
				hh = h % 12;
				s += pad((hh == 0) ? 12 : hh) + ':' + pad(t.getMinutes()) + ((h < 12) ? ' am' : ' pm');
			}
			return s;
		}
		function mMove(evt)
		{
			var x;
			if (maxV <= 0) return;
			if (evt.clientX > (vWidth - 120)) {
				if (pointLoc == 0) {
					if (evt.clientY < 30) {
						pointLoc = 1;
						pointText.setAttribute('y', '98%');
						pointTextBack.setAttribute('y', '94%');
					}
				}
				else {
					if (evt.clientY > (vHeight - 30)) {
						pointLoc = 0;
						pointText.setAttribute('y', '5%');
						pointTextBack.setAttribute('y', '1%');
					}
				}
			}
			setText(pointText, pointTime(evt.clientX) + ' / ' + xps(vY(evt.clientY)));
			x = pointText.getComputedTextLength();
			pointTextBack.setAttribute('x', (vWidth - x) - 22);
			pointTextBack.setAttribute('width', x + 20);
			if (eraseL == 0) pointG.setAttribute('visibility', 'visible');
			eraseL = 5;
		}
		function setXY(e, x, y)
		{
			e.setAttribute('x', x);
			e.setAttribute('y', y);
		}
		function toggleXpst()
		{
			E('xpst').setAttribute('class', (xpstVis ^= 1) ? 'show' : 'hide');
			ignoreNext = 1;
		}
	]]></script><rect width="100%" height="100%" x="0" y="0" fill="none"/><line x1="0" x2="100%" y1="50%" y2="50%"/><line x1="0" x2="100%" y1="25%" y2="25%"/><line x1="0" x2="100%" y1="75%" y2="75%"/><line id="tick0" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick1" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick2" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick3" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick4" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick5" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick6" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick7" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick8" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick9" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick10" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick11" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick12" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick13" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick14" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick15" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick16" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick17" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick18" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick19" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick20" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick21" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick22" x1="0" x2="0" y1="0%" y2="100%"/><line id="tick23" x1="0" x2="0" y1="0%" y2="100%"/><polyline id="polyTx" fill="#fff" stroke="#fff" class="dataLine"/><polyline id="polyRx" fill="#fff" stroke="#fff" class="dataLine"/><g id="pointGroup" visibility="hidden"><rect id="pointTextBack" width="268" height="15" x="490" y="0" class="back"/></g><rect id="maxTextBack" width="40" height="100%" x="0" y="0" class="back" onclick="toggleXpst()"/></svg>